-- SQL schema for Fitness App (MSSQL version with sample data)

-- Users table (general user info including clients, trainers, and admins)
CREATE TABLE Users (
    user_id INT PRIMARY KEY IDENTITY(1,1),
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    password_hash VARCHAR(255),
    role VARCHAR(10) CHECK (role IN ('client', 'trainer', 'admin')),
    created_at DATETIME DEFAULT GETDATE()
);

INSERT INTO Users (name, email, password_hash, role)
VALUES 
('Alice Smith', 'alice@example.com', 'hashed_password_1', 'client'),
('Bob Johnson', 'bob@example.com', 'hashed_password_2', 'trainer'),
('Admin User', 'admin@example.com', 'hashed_password_3', 'admin');

-- Client profiles with fitness goals and stats
CREATE TABLE ClientProfiles (
    client_id INT PRIMARY KEY,
    age INT,
    height_cm INT,
    weight_kg INT,
    gender VARCHAR(10) CHECK (gender IN ('male', 'female', 'other')),
    fitness_goal VARCHAR(100),
    fitness_level VARCHAR(15) CHECK (fitness_level IN ('beginner', 'intermediate', 'advanced')),
    FOREIGN KEY (client_id) REFERENCES Users(user_id)
);

INSERT INTO ClientProfiles (client_id, age, height_cm, weight_kg, gender, fitness_goal, fitness_level)
VALUES (1, 28, 170, 65, 'female', 'Weight Loss', 'beginner');

-- Workout Programs
CREATE TABLE WorkoutPrograms (
    program_id INT PRIMARY KEY IDENTITY(1,1),
    title VARCHAR(100),
    category VARCHAR(50),
    duration_minutes INT,
    difficulty VARCHAR(15) CHECK (difficulty IN ('beginner', 'intermediate', 'advanced')),
    equipment_required TEXT,
    description TEXT,
    popularity_score INT DEFAULT 0
);

INSERT INTO WorkoutPrograms (title, category, duration_minutes, difficulty, equipment_required, description)
VALUES 
('Full Body Beginner', 'Strength', 45, 'beginner', 'Dumbbells', 'A full body program for beginners'),
('Cardio Blast', 'Cardio', 30, 'intermediate', 'Treadmill', 'Intense cardio session for fat burn');

-- Favorites
CREATE TABLE Favorites (
    user_id INT,
    program_id INT,
    PRIMARY KEY (user_id, program_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (program_id) REFERENCES WorkoutPrograms(program_id)
);

INSERT INTO Favorites (user_id, program_id) VALUES (1, 1);

-- Workout Tracking
CREATE TABLE WorkoutLogs (
    log_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT,
    program_id INT,
    exercise_name VARCHAR(100),
    sets INT,
    reps INT,
    weight_kg DECIMAL(5,2),
    duration_minutes INT,
    log_date DATE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (program_id) REFERENCES WorkoutPrograms(program_id)
);

INSERT INTO WorkoutLogs (user_id, program_id, exercise_name, sets, reps, weight_kg, duration_minutes, log_date)
VALUES (1, 1, 'Squat', 3, 12, 40.5, 45, GETDATE());

-- Calendar Scheduling
CREATE TABLE WorkoutSchedule (
    schedule_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT,
    program_id INT,
    scheduled_time DATETIME,
    recurrence_pattern VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (program_id) REFERENCES WorkoutPrograms(program_id)
);

INSERT INTO WorkoutSchedule (user_id, program_id, scheduled_time, recurrence_pattern)
VALUES (1, 2, DATEADD(DAY, 1, GETDATE()), 'Daily');

-- Reminders
CREATE TABLE Reminders (
    reminder_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT,
    schedule_id INT,
    type VARCHAR(10) CHECK (type IN ('email', 'push', 'sms')),
    reminder_time DATETIME,
    reminder_sent BIT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (schedule_id) REFERENCES WorkoutSchedule(schedule_id)
);

INSERT INTO Reminders (user_id, schedule_id, type, reminder_time)
VALUES (1, 1, 'email', DATEADD(HOUR, -1, (SELECT scheduled_time FROM WorkoutSchedule WHERE schedule_id = 1)));

-- Nutrition Logging
CREATE TABLE NutritionLogs (
    log_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT,
    log_date DATE,
    meal_name VARCHAR(100),
    calories INT,
    protein_grams DECIMAL(5,2),
    carbs_grams DECIMAL(5,2),
    fats_grams DECIMAL(5,2),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

INSERT INTO NutritionLogs (user_id, log_date, meal_name, calories, protein_grams, carbs_grams, fats_grams)
VALUES (1, GETDATE(), 'Oatmeal with Banana', 350, 10.5, 60.0, 5.2);

-- Trainers table
CREATE TABLE TrainerProfiles (
    trainer_id INT PRIMARY KEY,
    specialization TEXT,
    experience_years INT,
    rating DECIMAL(3,2),
    credentials TEXT,
    FOREIGN KEY (trainer_id) REFERENCES Users(user_id)
);

INSERT INTO TrainerProfiles (trainer_id, specialization, experience_years, rating, credentials)
VALUES (2, 'Strength and Conditioning', 5, 4.8, 'ACE Certified');

-- Trainer Reviews
CREATE TABLE TrainerReviews (
    review_id INT PRIMARY KEY IDENTITY(1,1),
    trainer_id INT,
    client_id INT,
    rating INT,
    comment TEXT,
    review_date DATE,
    FOREIGN KEY (trainer_id) REFERENCES Users(user_id),
    FOREIGN KEY (client_id) REFERENCES Users(user_id)
);

INSERT INTO TrainerReviews (trainer_id, client_id, rating, comment, review_date)
VALUES (2, 1, 5, 'Great session!', GETDATE());

-- Admin Support Tickets
CREATE TABLE SupportTickets (
    ticket_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT,
    category VARCHAR(100),
    status VARCHAR(15) CHECK (status IN ('open', 'closed', 'in-progress')),
    description TEXT,
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

INSERT INTO SupportTickets (user_id, category, status, description)
VALUES (1, 'App Bug', 'open', 'The workout log is not saving correctly');
